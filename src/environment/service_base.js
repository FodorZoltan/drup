"use strict";

const utils = require("../utils");
const path = require("path");
const fs = require("fs-promise");
const dot = require("dot");
const escapeRegex = require("escape-string-regexp");

const DOT_EXT = ".dot";
const DOT_EXT_REGEX = new RegExp(escapeRegex(DOT_EXT) + "$");

class ServiceBase {

  constructor(config) {
    this.config = config || this.constructor.defaults();
  }

  static defaults() {
    return {};
  }

  get env() {
    if (!this._env) {
      throw new Error("Service not bound to any environment.");
    }

    return this._env;
  }

  bindEnvironment(env) {
    this._env = env;
  }

  configure() {
    if (!this._configure) {
      return Promise.resolve();
    }

    console.log("\n-- Configure " + this.ann("label"));
    return this._configure();
  }

  compose(containerType) {
    let fnName = "_compose" + containerType.charAt(0).toUpperCase() + containerType.slice(1);

    if (typeof this[fnName] !== "function") {
      utils.mustImplement(this, fnName);
    }

    return this[fnName]();
  }

  addConfigFiles(root) {
    let promises = [];
    let fileInfo = this._getConfigFileInfo();

    if (fileInfo === null) {
      return Promise.resolve();
    }

    if (typeof fileInfo !== "object") {
      throw new Error(`Wrong config files data provided by service ${this.ann("id")}`);
    }

    for (let [filename, data] of Object.entries(fileInfo)) {
      const confPath = path.join(__dirname, "services", this.ann("id"), "config", filename);
      const destPath = path.join(root, this._dir("CONFIG"), this.ann("id"));

      let promise = fs.ensureDir(destPath);

      if (filename.match(DOT_EXT_REGEX)) {
        promise = promise.then(() => {
            return this._compileConfigFile(confPath, data);
          })
          .then((configContent) => {
            return fs.writeFile(path.join(destPath, filename.slice(0, -DOT_EXT.length)), configContent);
          });
      }
      else {
        promise = promise.then(() => {
          return fs.copy(confPath, path.join(destPath, filename));
        });
      }

      promises.push(promise);
    }

    return Promise.all(promises)
      .catch((err) => {
        throw new Error(`Failed adding configuration files for '${this.ann("id")}' service.\n` + err);
      });
  }

  _getConfigFileInfo() {
    return null;
  }

  _compileConfigFile(templatePath, data) {
    return fs.readFile(templatePath)
      .then((template) => {
        template = "# <drup autogenerated config-file>\n\n" + template;

        dot.templateSettings.strip = false;
        dot.templateSettings.varname = "service";

        return dot.template(template)(data);
      })
      .catch((err) => {
        throw new Error(`Failed compiling config template:\nTEMPLATE:${templatePath}\n` + err);
      });
  }

  _dir(type) {
    if (!this.env.constructor.DIRECTORIES.hasOwnProperty(type)) {
      throw new Error(`The environment doesn't define the '${type}' type of directory.`);
    }

    return this.env.constructor.DIRECTORIES[type];
  }

}

module.exports = ServiceBase;
